// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  FACILITY
  ADMIN
}

enum Plan {
  FREE
  BASIC_SUMMARY
  LAB_HEALTHCARE
  ENTERPRISE
}

model User {
  id                    String    @id @default(auto()) @map("_id") @db.ObjectId
  name                  String?
  email                 String?   @unique
  emailVerified         Boolean   @default(false)
  image                 String?
  password              String
  role                  Role      @default(USER)
  telephone             String?
  facilityName          String?
  facilityType          String?
  address               String?
  city                  String?
  stateProvince         String?
  country               String?
  verificationCode      String?
  verificationExpires   DateTime?
  plan                  Plan      @default(FREE)
  stripeCustomerId      String?   @unique 
  stripeSubscriptionId  String?
  subscriptionStatus    String?
  subscriptionPlan      String?
  subscriptionEndDate   DateTime?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  // Relations
  sessions              Session[]
  accounts              Account[]
  admin                 Admin?
  patients   Patient[]    @relation("FacilityPatients")
  labResults LabResult[]  @relation("UserLabResults")
  reports    Report[]
}

model Account {
  id                 String  @id @default(auto()) @map("_id") @db.ObjectId
  userId             String  @db.ObjectId
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Patient {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  email       String   @unique
  phone       String?
  labResults  LabResult[]
  facility    User      @relation("FacilityPatients", fields: [facilityId], references: [id])
  facilityId  String    @db.ObjectId

  reports     Report[]  // Inverse relation to Report

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model LabResult {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  extractedText String
  uploadedAt    DateTime  @default(now())
  patient       Patient?  @relation(fields: [patientId], references: [id])
  patientId     String?   @db.ObjectId
  user          User      @relation("UserLabResults", fields: [userId], references: [id])
  userId        String     @db.ObjectId
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Report {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  title      String
  content    String
  user       User?     @relation(fields: [userId], references: [id])
  userId     String?   @db.ObjectId
  patient    Patient?  @relation(fields: [patientId], references: [id])
  patientId  String?   @db.ObjectId
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}


model Admin {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  user      User   @relation(fields: [userId], references: [id])
  userId    String @unique @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
